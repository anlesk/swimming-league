# source: https://api.supersport.online/graphql
# timestamp: Tue May 08 2018 18:16:29 GMT+0300 (Russia TZ 2 Standard Time)

schema {
  query: Query
  mutation: RootMutation
}

type AgeGroup implements Node {
  id: ID!
  maxAge: Int
  minAge: Int
  name: String
}

type Article implements Node {
  blocks: [ArticleBlockType]
  id: ID!
  image: String
  programs: [Program]!
  publishedAt: DateTime
  subtitle: String
  title: String
}

"""Article blocks which you can enjoy"""
union ArticleBlockType = ArticleText | ArticleImage | ArticleVideo

"""The connection type for Article."""
type ArticleConnection {
  """A list of edges."""
  edges: [ArticleEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type ArticleEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Article
}

type ArticleImage {
  imageUrl: String
}

input ArticleOrder {
  field: ArticleOrderField
  direction: OrderDirection
}

"""Properties by which article connections can be ordered."""
enum ArticleOrderField {
  """Order articles by published time"""
  PUBLISHED_AT

  """Order articles by name."""
  NAME
}

type ArticleText {
  text: String!
}

type ArticleVideo {
  videoUrl: String
}

"""Autogenerated input type of AuthRequest"""
input AuthRequestInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  phone: String!
}

"""Autogenerated return type of AuthRequest"""
type AuthRequestPayload implements MutationResult {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String]
  notice: String
  requestId: String
  success: Boolean!
}

"""Autogenerated input type of AuthVerify"""
input AuthVerifyInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  code: String!
  requestId: String!
}

"""Autogenerated return type of AuthVerify"""
type AuthVerifyPayload implements MutationResult {
  authToken: String

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String]
  notice: String
  success: Boolean!
  viewer: Student
}

type ControlLesson implements Node {
  date: DateTime!
  description: String!
  distance: Int
  endsAt: DateTime
  id: ID!
  imageUrl: String!
  location: Location!
  name: String!
  registrationVotes: [ControlLessonRegistrationVote]!
  results: [ControlLessonResult]!
  startsAt: DateTime!
  viewerRegistrationVote: ControlLessonRegistrationVote
  viewerResult: ControlLessonResult
}

"""The connection type for ControlLesson."""
type ControlLessonConnection {
  """A list of edges."""
  edges: [ControlLessonEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type ControlLessonEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ControlLesson
}

input ControlLessonOrder {
  field: ControlLessonOrderField
  direction: OrderDirection
}

"""Properties by which control lesson connections can be ordered."""
enum ControlLessonOrderField {
  """Order control lessons by start time"""
  STARTS_AT

  """Order control lessons by end time"""
  ENDS_AT
}

type ControlLessonRegistrationVote implements Node {
  id: ID!
  registered: Boolean
  registeredAt: DateTime
}

type ControlLessonResult implements Node {
  ageGroup: AgeGroup
  controlLesson: ControlLesson!
  id: ID!
  lapLength: Int
  lapTimes: [Milliseconds]
  rating: Int
  ratingInAgeGroup: Int
  student: Student!
  totalTime: Milliseconds
}

"""The connection type for ControlLessonResult."""
type ControlLessonResultConnection {
  """A list of edges."""
  edges: [ControlLessonResultEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type ControlLessonResultEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ControlLessonResult
}

"""Autogenerated input type of CreateDeviceToken"""
input CreateDeviceTokenInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  token: String!
  platform: Platform!
}

"""Autogenerated return type of CreateDeviceToken"""
type CreateDeviceTokenPayload implements MutationResult {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String]
  notice: String
  success: Boolean!
}

"""
Autogenerated input type of CreateOrUpdateControlLessonRegistrationVote
"""
input CreateOrUpdateControlLessonRegistrationVoteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  controlLessonId: ID!
  registered: Boolean!
}

"""
Autogenerated return type of CreateOrUpdateControlLessonRegistrationVote
"""
type CreateOrUpdateControlLessonRegistrationVotePayload implements MutationResult {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  controlLessonRegistrationVote: ControlLessonRegistrationVote
  errors: [String]
  notice: String
  success: Boolean!
}

"""Autogenerated input type of CreateOrUpdateEventRegistrationVote"""
input CreateOrUpdateEventRegistrationVoteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  eventId: ID!
  status: EventRegistrationVoteStatus
}

"""Autogenerated return type of CreateOrUpdateEventRegistrationVote"""
type CreateOrUpdateEventRegistrationVotePayload implements MutationResult {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String]
  eventRegistrationVote: EventRegistrationVote
  notice: String
  success: Boolean!
}

"""Autogenerated input type of CreateOrUpdateFeedback"""
input CreateOrUpdateFeedbackInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  feedbackableId: ID!
  rating: FeedbackRating!
}

"""Autogenerated return type of CreateOrUpdateFeedback"""
type CreateOrUpdateFeedbackPayload implements MutationResult {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String]
  feedback: Feedback
  notice: String
  success: Boolean!
}

"""Autogenerated input type of CreateOrUpdateStudentProgramGoal"""
input CreateOrUpdateStudentProgramGoalInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  programId: ID!
  goalId: ID!
}

"""Autogenerated return type of CreateOrUpdateStudentProgramGoal"""
type CreateOrUpdateStudentProgramGoalPayload implements MutationResult {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String]
  goal: Goal
  notice: String
  success: Boolean!
}

"""Date expressed according to ISO 8601 2018-01-15"""
scalar DateIso

"""An ISO-8601 encoded UTC date string 2018-01-15T14:56:02+00:00"""
scalar DateTime

"""Day of the week"""
enum DayOfTheWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

type Equipment implements Node {
  id: ID!
  name: String
}

type Event implements Node {
  description: String
  endsAt: DateTime
  id: ID!
  imageUrl: String!
  location: Location!
  name: String!
  programs: [Program]!
  registrationVotes: [EventRegistrationVote]!
  startsAt: DateTime!
  viewerRegistrationVote: EventRegistrationVote
}

"""The connection type for Event."""
type EventConnection {
  """A list of edges."""
  edges: [EventEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type EventEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Event
}

input EventOrder {
  field: EventOrderField
  direction: OrderDirection
}

"""Properties by which event connections can be ordered."""
enum EventOrderField {
  """Order events by name."""
  NAME

  """Order events by start time"""
  STARTS_AT

  """Order events by end time"""
  ENDS_AT
}

type EventRegistrationVote implements Node {
  id: ID!
  status: EventRegistrationVoteStatus!
}

"""Vote statuses for events"""
enum EventRegistrationVoteStatus {
  REGISTERED
  INTERESTED
  CANCELED
}

type Exercise implements Node {
  id: ID!
  imageUrl: String!
  name: String!
  videoUrl: String!
}

type FaqEntity implements Node {
  answer: String!
  id: ID!
  programs: [Program]!
  question: String!
}

"""The connection type for FaqEntity."""
type FaqEntityConnection {
  """A list of edges."""
  edges: [FaqEntityEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type FaqEntityEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: FaqEntity
}

type Feedback implements Node {
  createdAt: DateTime!
  feedbackable: Feedbackable!
  id: ID!
  rating: FeedbackRating!
  student: Student!
}

"""Represents a subject that can be feedbacked on."""
interface Feedbackable {
  id: ID!
  viewerFeedback: Feedback
}

"""Possible rating types."""
enum FeedbackRating {
  EXCELLENT
  NORMAL
  BAD
  MISS
}

enum Gender {
  MALE
  FEMALE
}

type Goal implements Node {
  dateFrom: DateTime!
  dateTo: DateTime
  description: String
  id: ID!
  title: String!
}

type Group implements Node {
  daysOfTheWeekWithLessons: [DayOfTheWeek]!
  id: ID!
  locations: [Location]!
  name: String!
  program: Program!
  schedule: String!
  trainers: [Trainer]!
}

type Homework implements Feedbackable & Node {
  description: String
  equipments: [Equipment]
  exercises: [Exercise]
  id: ID!
  imageUrl: String!
  name: String!
  viewerDate: DateIso!
  viewerFeedback: Feedback
  volume: Int
}

"""The connection type for Homework."""
type HomeworkConnection {
  """A list of edges."""
  edges: [HomeworkEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type HomeworkEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Homework
}

type Lesson implements Feedbackable & Node {
  description: String
  endsAt: DateTime
  equipments: [Equipment]
  exercises: [Exercise]
  group: Group!
  id: ID!
  imageUrl: String!
  location: Location!
  name: String!
  startsAt: DateTime!
  viewerFeedback: Feedback
  volume: Int
}

"""The connection type for Lesson."""
type LessonConnection {
  """A list of edges."""
  edges: [LessonEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type LessonEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Lesson
}

input LessonOrder {
  field: LessonOrderField
  direction: OrderDirection
}

"""Properties by which lesson connections can be ordered."""
enum LessonOrderField {
  """Order lessons by start time"""
  STARTS_AT

  """Order lessons by end time"""
  ENDS_AT
}

type Level implements Node {
  id: ID!
  name: String
}

type Location implements Node {
  address: String!
  description: String
  id: ID!
  kind: String
  lat: Float!
  link: String
  lng: Float!
}

"""Milliseconds counter"""
scalar Milliseconds

interface MutationResult {
  errors: [String]
  notice: String
  success: Boolean!
}

"""An object with an ID."""
interface Node {
  """ID of the object."""
  id: ID!
}

"""
Possible directions in which to order a list of items when provided an orderBy argument.
"""
enum OrderDirection {
  """Specifies an ascending order for a given orderBy argument."""
  ASC

  """Specifies a descending order for a given orderBy argument."""
  DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Platform name, ios or android"""
scalar Platform

type Program implements Node {
  dateFrom: DateTime!
  dateTo: DateTime!
  goals: [Goal]
  homeworksNumberPerWeek: Int
  id: ID!
  level: Level
  name: String!
  sport: Sport!
  telegramGroupUrl: String
  type: String
  viewerDaysOfTheWeekWithHomeworks: [DayOfTheWeek]!
  viewerGoal: Goal
  viewerGroups: [Group]
}

"""The connection type for Program."""
type ProgramConnection {
  """A list of edges."""
  edges: [ProgramEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type ProgramEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Program
}

type Query {
  ageGroups: [AgeGroup]!

  """A list of Control Lessons associated with current student."""
  controlLessonResultsConnection(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
    studentName: String
    studentGender: Gender
    studentId: ID
    ageGroupId: ID
  ): ControlLessonResultConnection

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!

  """Returns Settings"""
  settings: Settings
  viewer(sport: Sport): Student!
}

"""The mutation root of this schema"""
type RootMutation {
  authRequest(input: AuthRequestInput!): AuthRequestPayload
  authVerify(input: AuthVerifyInput!): AuthVerifyPayload
  createDeviceToken(input: CreateDeviceTokenInput!): CreateDeviceTokenPayload
  createOrUpdateControlLessonRegistrationVote(input: CreateOrUpdateControlLessonRegistrationVoteInput!): CreateOrUpdateControlLessonRegistrationVotePayload
  createOrUpdateEventRegistrationVote(input: CreateOrUpdateEventRegistrationVoteInput!): CreateOrUpdateEventRegistrationVotePayload
  createOrUpdateFeedback(input: CreateOrUpdateFeedbackInput!): CreateOrUpdateFeedbackPayload
  createOrUpdateStudentProgramGoal(input: CreateOrUpdateStudentProgramGoalInput!): CreateOrUpdateStudentProgramGoalPayload
  setHomeworkDays(input: SetHomeworkDaysInput!): SetHomeworkDaysPayload
}

"""Autogenerated input type of SetHomeworkDays"""
input SetHomeworkDaysInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  daysOfTheWeek: [DayOfTheWeek]!
  programId: ID!
}

"""Autogenerated return type of SetHomeworkDays"""
type SetHomeworkDaysPayload implements MutationResult {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  daysOfTheWeek: [DayOfTheWeek]
  errors: [String]
  notice: String
  success: Boolean!
}

type Settings {
  outOfSupportVersion: String
  unsupportedVersion: String
}

"""Possible sport types."""
enum Sport {
  RUNNING
  SWIMMING
  CYCLING
  TRIATHLON
  SKIING
}

type Student implements Node {
  """A list of Articles associated with current student."""
  articlesConnection(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
    orderBy: ArticleOrder
    programId: ID
  ): ArticleConnection
  birthdate: DateIso

  """A list of Control Lessons associated with current student."""
  controlLessonsConnection(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """Returns the elements starts or ends from date"""
    dateFrom: DateIso

    """Returns the elements starts or ends before date"""
    dateTo: DateIso
    orderBy: ControlLessonOrder
    groupId: ID
    programId: ID
  ): ControlLessonConnection

  """A list of Events associated with current student."""
  eventsConnection(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """Returns the elements starts or ends from date"""
    dateFrom: DateIso

    """Returns the elements starts or ends before date"""
    dateTo: DateIso
    orderBy: EventOrder
    programId: ID
  ): EventConnection

  """A list of FAQ Entities associated with current student."""
  faqEntitiesConnection(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
    programId: ID
  ): FaqEntityConnection
  gender: Gender

  """A list of Homeworks associated with current student."""
  homeworksConnection(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """Returns the elements starts or ends from date"""
    dateFrom: DateIso

    """Returns the elements starts or ends before date"""
    dateTo: DateIso
    programId: ID
  ): HomeworkConnection
  id: ID!

  """A list of Lessons associated with current student."""
  lessonsConnection(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """Returns the elements starts or ends from date"""
    dateFrom: DateIso

    """Returns the elements starts or ends before date"""
    dateTo: DateIso
    orderBy: LessonOrder
    groupId: ID
    programId: ID
  ): LessonConnection
  name: String!

  """A list of Programs associated with current student."""
  programsConnection(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): ProgramConnection
}

type Trainer implements Node {
  id: ID!
  name: String!
}
